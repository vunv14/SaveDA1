/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package raven.application.form.other.sanpham.QR;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.lang.System.Logger.Level;
import java.util.concurrent.ThreadFactory;
import jxl.common.Logger;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import raven.application.form.other.sanpham.model.ModelSanPhamCT;
import raven.application.form.other.sanpham.repository.RepositorySanPhamCT;
import raven.application.form.other.sanpham.view.Viewsanpham;
import raven.entity.SanPhamChiTietSP;

/**
 *
 * @author Nguyễn Vũ
 */
public class QuetQR extends javax.swing.JDialog implements Runnable, ThreadFactory {

    /**
     * Creates new form QuetQR
     */
    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private Executor executor = Executors.newSingleThreadExecutor(this);
    public static String maSPCT;
    Viewsanpham viewsanpham;

    public QuetQR(Viewsanpham viewsanpham, boolean modal) {
        this.viewsanpham = viewsanpham;
        initComponents();
        this.setTitle("Quét Mã QR");
        this.setLocationRelativeTo(null);
        maSPCT = txt_ma.getText();
        // Khởi tạo webcam
        this.initWebcam();

        // Đăng ký sự kiện đóng cửa sổ
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if (webcam.isOpen()) {
                    webcam.close();
                }
            }
        });

        // Bắt đầu luồng quét QR
        executor.execute(this);
    }

    String getText() {
        String maSPCT = txt_ma.getText();
        return maSPCT;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txt_ma = new javax.swing.JTextField();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 310, 210));
        jPanel1.add(txt_ma, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, -1, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuetQR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuetQR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuetQR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuetQR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Viewsanpham viewsanpham = new Viewsanpham();

                QuetQR dialog = new QuetQR(viewsanpham, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void initWebcam() {
        Dimension size = WebcamResolution.QVGA.getSize();
        webcam = Webcam.getWebcams().get(0);
        webcam.setViewSize(size);

        panel = new WebcamPanel(webcam);
        panel.setPreferredSize(size);
        panel.setFPSDisplayed(true);

        jPanel2.setLayout(new java.awt.BorderLayout()); // Sử dụng BorderLayout
        jPanel2.add(panel, java.awt.BorderLayout.CENTER); // Thêm panel vào jPanel2

        this.pack(); // Cập nhật kích thước của JDialog
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txt_ma;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (true) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            Result result = null;
            BufferedImage image = null;

            if (webcam.isOpen()) {
                if ((image = webcam.getImage()) == null) {
                    continue;
                }
            } else {
                System.out.println("Webcam chưa mở.");
                return; // Kết thúc phương thức nếu webcam không mở
            }

            // Lưu ảnh vào đĩa để kiểm tra lỗi
            try {
                ImageIO.write(image, "PNG", new File("debug_image.png"));
            } catch (IOException e) {
                e.printStackTrace();
            }

            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

            try {
                result = new MultiFormatReader().decode(bitmap);
                System.out.println(result + "UUUUUUUUUUU");
            } catch (NotFoundException e) {
                // Không tìm thấy mã QR trong ảnh
                System.out.println("Không tìm thấy mã QR trong ảnh.");
                e.printStackTrace();
                continue; // Tiếp tục vòng lặp để quét ảnh tiếp theo
            } catch (Exception e) {
                // Lỗi khi giải mã mã QR
                System.out.println("Lỗi khi giải mã mã QR.");
                e.printStackTrace();
                continue; // Tiếp tục vòng lặp để quét ảnh tiếp theo
            }

            if (result != null) {
                maSPCT = result.getText();
                System.out.println("QR Code Data: " + maSPCT);
                showProductInfo(maSPCT); // Mở ProductInfoDialog
                break; // Thoát khỏi vòng lặp khi quét thành công
            } else {
                System.out.println("Kết quả giải mã là null.");
            }
        }
    }

    @Override
    public Thread newThread(Runnable r) {

        Thread t = new Thread(r, "My thread");
        t.setDaemon(true);
        return t;

    }

    private void showProductInfo(String qrCodeData) {
        System.out.println(qrCodeData + "aaaaaaaaaaa");
        ModelSanPhamCT product = new RepositorySanPhamCT().getAllSPCTByMa(qrCodeData);
        System.out.println("Product Info: " + product); // Thêm thông báo kiểm tra

        java.awt.EventQueue.invokeLater(() -> {
            ProductInfoDialog dialog = new ProductInfoDialog(new javax.swing.JFrame(), true);
            dialog.setProductDetails(product); // Gọi phương thức setProductDetails
            dialog.setVisible(true);
        });
    }

}
